D G "__PCH__" 0 101 ""5.046""
D G "__DEVICE__" 0 101 "4620"
D G "__DATE__" 0 101 ""25-jul-15""
D G "__TIME__" 0 101 ""00:24:50""
D G "_UNICODE" 0 101 ""?"" "Standard Header file for the PIC18F4620 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 43 ""
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
f N "set_tris_b" 2 44 ""
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
f N "set_tris_c" 2 45 ""
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
f N "set_tris_d" 2 46 ""
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
f N "set_tris_e" 2 47 ""
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f N "get_tris_a" 2 48 ""
f B "get_tris_a" 2 48 "int8()" `63 
f N "get_tris_b" 2 49 ""
f B "get_tris_b" 2 49 "int8()" `64 
f N "get_tris_c" 2 50 ""
f B "get_tris_c" 2 50 "int8()" `65 
f N "get_tris_d" 2 51 ""
f B "get_tris_d" 2 51 "int8()" `66 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `67 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `69 
f B "output_a" 2 53 "void(int8 value)" `68 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `71 
f B "output_b" 2 54 "void(int8 value)" `70 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `73 
f B "output_c" 2 55 "void(int8 value)" `72 
f N "output_d" 2 56 ""
v L "value" 2 56 "int8" `75 
f B "output_d" 2 56 "void(int8 value)" `74 
f N "output_e" 2 57 ""
v L "value" 2 57 "int8" `77 
f B "output_e" 2 57 "void(int8 value)" `76 
f N "input_a" 2 58 ""
f B "input_a" 2 58 "int8()" `78 
f N "input_b" 2 59 ""
f B "input_b" 2 59 "int8()" `79 
f N "input_c" 2 60 ""
f B "input_c" 2 60 "int8()" `80 
f N "input_d" 2 61 ""
f B "input_d" 2 61 "int8()" `81 
f N "input_e" 2 62 ""
f B "input_e" 2 62 "int8()" `82 
f N "input_change_a" 2 63 ""
f B "input_change_a" 2 63 "int8()" `83 
f N "input_change_b" 2 64 ""
f B "input_change_b" 2 64 "int8()" `84 
f N "input_change_c" 2 65 ""
f B "input_change_c" 2 65 "int8()" `85 
f N "input_change_d" 2 66 ""
f B "input_change_d" 2 66 "int8()" `86 
f N "input_change_e" 2 67 ""
f B "input_change_e" 2 67 "int8()" `87 
f N "port_b_pullups" 2 68 ""
v L "value" 2 68 "int8" `89 
f B "port_b_pullups" 2 68 "void(int8 value)" `88 
f N "input" 2 69 ""
v L "pin" 2 69 "int16" `91 
f B "input" 2 69 "int8(int16 pin)" `90 
f N "input_state" 2 70 ""
v L "pin" 2 70 "int16" `93 
f B "input_state" 2 70 "int8(int16 pin)" `92 
f N "output_low" 2 71 ""
v L "pin" 2 71 "int16" `95 
f B "output_low" 2 71 "void(int16 pin)" `94 
f N "output_high" 2 72 ""
v L "pin" 2 72 "int16" `97 
f B "output_high" 2 72 "void(int16 pin)" `96 
f N "output_toggle" 2 73 ""
v L "pin" 2 73 "int16" `99 
f B "output_toggle" 2 73 "void(int16 pin)" `98 
f N "output_bit" 2 74 ""
v L "pin" 2 74 "int16" `101 
v L "level" 2 74 "int8" `102 
f B "output_bit" 2 74 "void(int16 pin,int8 level)" `100 
f N "output_float" 2 75 ""
v L "pin" 2 75 "int16" `104 
f B "output_float" 2 75 "void(int16 pin)" `103 
f N "output_drive" 2 76 ""
v L "pin" 2 76 "int16" `106 
f B "output_drive" 2 76 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 80 "31744"
d G "PIN_A1" 2 81 "31745"
d G "PIN_A2" 2 82 "31746"
d G "PIN_A3" 2 83 "31747"
d G "PIN_A4" 2 84 "31748"
d G "PIN_A5" 2 85 "31749"
d G "PIN_A6" 2 86 "31750"
d G "PIN_A7" 2 87 "31751"
d G "PIN_B0" 2 89 "31752"
d G "PIN_B1" 2 90 "31753"
d G "PIN_B2" 2 91 "31754"
d G "PIN_B3" 2 92 "31755"
d G "PIN_B4" 2 93 "31756"
d G "PIN_B5" 2 94 "31757"
d G "PIN_B6" 2 95 "31758"
d G "PIN_B7" 2 96 "31759"
d G "PIN_C0" 2 98 "31760"
d G "PIN_C1" 2 99 "31761"
d G "PIN_C2" 2 100 "31762"
d G "PIN_C3" 2 101 "31763"
d G "PIN_C4" 2 102 "31764"
d G "PIN_C5" 2 103 "31765"
d G "PIN_C6" 2 104 "31766"
d G "PIN_C7" 2 105 "31767"
d G "PIN_D0" 2 107 "31768"
d G "PIN_D1" 2 108 "31769"
d G "PIN_D2" 2 109 "31770"
d G "PIN_D3" 2 110 "31771"
d G "PIN_D4" 2 111 "31772"
d G "PIN_D5" 2 112 "31773"
d G "PIN_D6" 2 113 "31774"
d G "PIN_D7" 2 114 "31775"
d G "PIN_E0" 2 116 "31776"
d G "PIN_E1" 2 117 "31777"
d G "PIN_E2" 2 118 "31778"
d G "PIN_E3" 2 119 "31779"
d G "FALSE" 2 122 "0"
d G "TRUE" 2 123 "1"
d G "BYTE" 2 125 "int8"
d G "BOOLEAN" 2 126 "int1"
d G "getc" 2 128 "getch"
d G "fgetc" 2 129 "getch"
d G "getchar" 2 130 "getch"
d G "putc" 2 131 "putchar"
d G "fputc" 2 132 "putchar"
d G "fgets" 2 133 "gets"
d G "fputs" 2 134 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 139 ""
f B "restart_cause" 2 139 "int8()" `107 
f N "reset_cpu" 2 140 ""
f B "reset_cpu" 2 140 "void()" `108 
f N "sleep" 2 141 ""
f B "sleep" 2 141 "void()" `109 
f N "sleep" 2 142 ""
v L "type" 2 142 "int8" `111 
f G "sleep" 2 142 "void(int8 type)" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 144 "7"
d G "MCLR_FROM_SLEEP" 2 145 "11"
d G "MCLR_FROM_RUN" 2 146 "15"
d G "NORMAL_POWER_UP" 2 147 "12"
d G "BROWNOUT_RESTART" 2 148 "14"
d G "WDT_FROM_SLEEP" 2 149 "3"
d G "RESET_INSTRUCTION" 2 150 "0"
d G "SLEEP_FULL" 2 153 "0" "Default"
d G "SLEEP_IDLE" 2 154 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 161 ""
v L "mode" 2 161 "int8" `113 
f B "setup_timer_0" 2 161 "void(int8 mode)" `112 
f N "set_timer0" 2 162 ""
v L "value" 2 162 "int16" `115 
f B "set_timer0" 2 162 "void(int16 value)" `114 
f N "get_timer0" 2 163 ""
f B "get_timer0" 2 163 "int16()" `116 
f N "setup_counters" 2 164 ""
v L "mode" 2 164 "int8" `118 
v L "prescaler" 2 164 "int8" `119 
f B "setup_counters" 2 164 "void(int8 mode,int8 prescaler)" `117 
f N "set_rtcc" 2 165 ""
v L "value" 2 165 "int16" `121 
f B "set_rtcc" 2 165 "void(int16 value)" `120 
f N "get_rtcc" 2 166 ""
f B "get_rtcc" 2 166 "int16()" `122  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 168 "0"
d G "T0_EXT_L_TO_H" 2 169 "32"
d G "T0_EXT_H_TO_L" 2 170 "48"
d G "T0_DIV_1" 2 172 "8"
d G "T0_DIV_2" 2 173 "0"
d G "T0_DIV_4" 2 174 "1"
d G "T0_DIV_8" 2 175 "2"
d G "T0_DIV_16" 2 176 "3"
d G "T0_DIV_32" 2 177 "4"
d G "T0_DIV_64" 2 178 "5"
d G "T0_DIV_128" 2 179 "6"
d G "T0_DIV_256" 2 180 "7"
d G "T0_OFF" 2 182 "0x80"
d G "T0_8_BIT" 2 184 "0x40"
d G "RTCC_INTERNAL" 2 186 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 187 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 188 "48"
d G "RTCC_DIV_1" 2 189 "8"
d G "RTCC_DIV_2" 2 190 "0"
d G "RTCC_DIV_4" 2 191 "1"
d G "RTCC_DIV_8" 2 192 "2"
d G "RTCC_DIV_16" 2 193 "3"
d G "RTCC_DIV_32" 2 194 "4"
d G "RTCC_DIV_64" 2 195 "5"
d G "RTCC_DIV_128" 2 196 "6"
d G "RTCC_DIV_256" 2 197 "7"
d G "RTCC_OFF" 2 198 "0x80"
d G "RTCC_8_BIT" 2 199 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 210 ""
v L "mode" 2 210 "int16" `124 
f B "setup_wdt" 2 210 "void(int16 mode)" `123 
f N "restart_wdt" 2 211 ""
f B "restart_wdt" 2 211 "void()" `125  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 213 "0x100"
d G "WDT_OFF" 2 214 "0"
d G "WDT_4MS" 2 216 "0x300"
d G "WDT_8MS" 2 217 "0x500"
d G "WDT_16MS" 2 218 "0x700"
d G "WDT_32MS" 2 219 "0x900"
d G "WDT_64MS" 2 220 "0xB00"
d G "WDT_128MS" 2 221 "0xD00"
d G "WDT_256MS" 2 222 "0xF00"
d G "WDT_512MS" 2 223 "0x1100"
d G "WDT_1S" 2 224 "0x1300"
d G "WDT_2S" 2 225 "0x1500"
d G "WDT_4S" 2 226 "0x1700"
d G "WDT_8S" 2 227 "0x1900"
d G "WDT_16" 2 228 "0x1B00"
d G "WDT_32S" 2 229 "0x1D00"
d G "WDT_64S" 2 230 "0x1F00"
d G "WDT_128S" 2 231 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 236 ""
v L "mode" 2 236 "int16" `127 
f B "setup_timer_1" 2 236 "void(int16 mode)" `126 
f N "get_timer1" 2 237 ""
f B "get_timer1" 2 237 "int16()" `128 
f N "set_timer1" 2 238 ""
v L "value" 2 238 "int16" `130 
f B "set_timer1" 2 238 "void(int16 value)" `129  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 241 "0"
d G "T1_INTERNAL" 2 242 "0x85"
d G "T1_EXTERNAL" 2 243 "0x87"
d G "T1_EXTERNAL_SYNC" 2 244 "0x83"
d G "T1_CLK_OUT" 2 246 "8"
d G "T1_DIV_BY_1" 2 248 "0"
d G "T1_DIV_BY_2" 2 249 "0x10"
d G "T1_DIV_BY_4" 2 250 "0x20"
d G "T1_DIV_BY_8" 2 251 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 256 ""
v L "mode" 2 256 "int8" `132 
v L "period" 2 256 "int8" `133 
v L "postscale" 2 256 "int8" `134 
f B "setup_timer_2" 2 256 "void(int8 mode,int8 period,int8 postscale)" `131 
f N "get_timer2" 2 257 ""
f B "get_timer2" 2 257 "int8()" `135 
f N "set_timer2" 2 258 ""
v L "value" 2 258 "int8" `137 
f B "set_timer2" 2 258 "void(int8 value)" `136  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 260 "0"
d G "T2_DIV_BY_1" 2 261 "4"
d G "T2_DIV_BY_4" 2 262 "5"
d G "T2_DIV_BY_16" 2 263 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 268 ""
v L "mode" 2 268 "int16" `139 
f B "setup_timer_3" 2 268 "void(int16 mode)" `138 
f N "get_timer3" 2 269 ""
f B "get_timer3" 2 269 "int16()" `140 
f N "set_timer3" 2 270 ""
v L "value" 2 270 "int16" `142 
f B "set_timer3" 2 270 "void(int16 value)" `141  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 273 "0"
d G "T3_INTERNAL" 2 274 "0x85"
d G "T3_EXTERNAL" 2 275 "0x87"
d G "T3_EXTERNAL_SYNC" 2 276 "0x83"
d G "T3_DIV_BY_1" 2 278 "0"
d G "T3_DIV_BY_2" 2 279 "0x10"
d G "T3_DIV_BY_4" 2 280 "0x20"
d G "T3_DIV_BY_8" 2 281 "0x30"
d G "T3_CCP1_TO_2" 2 284 "0x48"
d G "T3_CCP2" 2 285 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 291 ""
v L "mode" 2 291 "int32" `144 
f B "setup_ccp1" 2 291 "void(int32 mode)" `143 
f N "setup_ccp1" 2 292 ""
v L "mode" 2 292 "int32" `146 
v L "pwm" 2 292 "int8" `147 
f G "setup_ccp1" 2 292 "void(int32 mode,int8 pwm)" `145 
f N "set_pwm1_duty" 2 293 ""
v L "value" 2 293 "int16" `149 
f B "set_pwm1_duty" 2 293 "void(int16 value)" `148  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 295 "0"
d G "CCP_CAPTURE_FE" 2 296 "0x04"
d G "CCP_CAPTURE_RE" 2 297 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 298 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 299 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 300 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 301 "0x09"
d G "CCP_COMPARE_INT" 2 302 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 303 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 304 "0x0B"
d G "CCP_PWM" 2 305 "0x0C"
d G "CCP_PWM_PLUS_1" 2 306 "0x1c"
d G "CCP_PWM_PLUS_2" 2 307 "0x2c"
d G "CCP_PWM_PLUS_3" 2 308 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 315 "0x0c"
d G "CCP_PWM_H_L" 2 316 "0x0d"
d G "CCP_PWM_L_H" 2 317 "0x0e"
d G "CCP_PWM_L_L" 2 318 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 320 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 321 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 322 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 324 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 325 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 326 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 327 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 328 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 329 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 330 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 332 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 333 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 334 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 336 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 337 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 338 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 340 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 344 ""
v L "mode" 2 344 "int32" `154 
f B "setup_ccp2" 2 344 "void(int32 mode)" `153 
f N "setup_ccp2" 2 345 ""
v L "mode" 2 345 "int32" `156 
v L "pwm" 2 345 "int8" `157 
f G "setup_ccp2" 2 345 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm2_duty" 2 346 ""
v L "value" 2 346 "int16" `159 
f B "set_pwm2_duty" 2 346 "void(int16 value)" `158 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
f N "setup_psp" 2 355 ""
v L "mode" 2 355 "int8" `164 
f B "setup_psp" 2 355 "void(int8 mode)" `163 
f N "psp_output_full" 2 356 ""
f B "psp_output_full" 2 356 "int8()" `165 
f N "psp_input_full" 2 357 ""
f B "psp_input_full" 2 357 "int8()" `166 
f N "psp_overflow" 2 358 ""
f B "psp_overflow" 2 358 "int8()" `167  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 360 "0x10"
d G "PSP_DISABLED" 2 361 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
f N "setup_spi" 2 368 ""
v L "mode" 2 368 "int32" `170 
f B "setup_spi" 2 368 "void(int32 mode)" `169 
f N "spi_write" 2 369 ""
v L "value" 2 369 "int8" `172 
f B "spi_write" 2 369 "void(int8 value)" `171 
f N "spi_read" 2 370 ""
f B "spi_read" 2 370 "int8()" `173 
f N "spi_read" 2 371 ""
v L "value" 2 371 "int8" `175 
f G "spi_read" 2 371 "int8(int8 value)" `174 
f N "spi_data_in" 2 372 ""
f B "spi_data_in" 2 372 "int8()" `176 
f N "setup_spi2" 2 373 ""
v L "mode" 2 373 "int32" `178 
f B "setup_spi2" 2 373 "void(int32 mode)" `177 
f N "spi_write2" 2 374 ""
v L "value" 2 374 "int8" `180 
f B "spi_write2" 2 374 "void(int8 value)" `179 
f N "spi_read2" 2 375 ""
f B "spi_read2" 2 375 "int8()" `181 
f N "spi_read2" 2 376 ""
v L "value" 2 376 "int8" `183 
f G "spi_read2" 2 376 "int8(int8 value)" `182 
f N "spi_data_in2" 2 377 ""
f B "spi_data_in2" 2 377 "int8()" `184  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 379 "0x00"
d G "SPI_MASTER" 2 380 "0x20"
d G "SPI_SLAVE" 2 381 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 382 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 383 "0x00"
d G "SPI_CLK_DIV_4" 2 384 "0x00"
d G "SPI_CLK_DIV_16" 2 385 "0x01"
d G "SPI_CLK_DIV_64" 2 386 "0x02"
d G "SPI_CLK_T2" 2 387 "0x03"
d G "SPI_SS_DISABLED" 2 388 "0x01"
d G "SPI_XMIT_L_TO_H" 2 390 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 391 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 393 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 394 "0x8000"
d G "SPI_L_TO_H" 2 397 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 398 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 402 ""
v L "baud" 2 402 "int32" `186 
f B "setup_uart" 2 402 "void(int32 baud)" `185 
f N "setup_uart" 2 403 ""
v L "baud" 2 403 "int32" `188 
v L "stream" 2 403 "int8" `189 
f G "setup_uart" 2 403 "void(int32 baud,int8 stream)" `187 
f N "setup_uart" 2 404 ""
v L "baud" 2 404 "int32" `191 
v L "stream" 2 404 "int8" `192 
v L "clock" 2 404 "int32" `193 
f G "setup_uart" 2 404 "void(int32 baud,int8 stream,int32 clock)" `190 
f N "set_uart_speed" 2 405 ""
v L "baud" 2 405 "int32" `195 
f B "set_uart_speed" 2 405 "void(int32 baud)" `194 
f N "set_uart_speed" 2 406 ""
v L "baud" 2 406 "int32" `197 
v L "stream" 2 406 "int8" `198 
f G "set_uart_speed" 2 406 "void(int32 baud,int8 stream)" `196 
f N "set_uart_speed" 2 407 ""
v L "baud" 2 407 "int32" `200 
v L "stream" 2 407 "int8" `201 
v L "clock" 2 407 "int32" `202 
f G "set_uart_speed" 2 407 "void(int32 baud,int8 stream,int32 clock)" `199  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 411 "2"
d G "UART_DATA" 2 412 "4"
d G "UART_AUTODETECT" 2 413 "8"
d G "UART_AUTODETECT_NOWAIT" 2 414 "9"
d G "UART_WAKEUP_ON_RDA" 2 415 "10"
d G "UART_SEND_BREAK" 2 416 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 420 ""
v L "mode" 2 420 "int32" `204 
f B "setup_comparator" 2 420 "void(int32 mode)" `203  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 422 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 423 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 424 "0xbcf05"
d G "NC_NC_NC_NC" 2 425 "0x0ff07"
d G "A0_A3_A1_A2" 2 426 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 427 "0x9ef01"
d G "A0_VR_A1_VR" 2 428 "0x3ff06"
d G "A3_VR_A2_VR" 2 429 "0xcff0e"
d G "CP1_INVERT" 2 430 "0x0000010"
d G "CP2_INVERT" 2 431 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 438 ""
v L "mode" 2 438 "int8" `208 
f B "setup_vref" 2 438 "void(int8 mode)" `207  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 440 "0xa0"
d G "VREF_HIGH" 2 441 "0x80"
d G "VREF_F5" 2 443 "0x40"
d G "VREF_COMP" 2 444 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 448 ""
v L "mode" 2 448 "int8" `210 
f B "setup_low_volt_detect" 2 448 "void(int8 mode)" `209  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 450 "0x1F"
d G "LVD_45" 2 451 "0x1E"
d G "LVD_42" 2 452 "0x1D"
d G "LVD_40" 2 453 "0x1C"
d G "LVD_38" 2 454 "0x1B"
d G "LVD_36" 2 455 "0x1A"
d G "LVD_35" 2 456 "0x19"
d G "LVD_33" 2 457 "0x18"
d G "LVD_30" 2 458 "0x17"
d G "LVD_28" 2 459 "0x16"
d G "LVD_27" 2 460 "0x15"
d G "LVD_25" 2 461 "0x14"
d G "LVD_24" 2 462 "0x13"
d G "LVD_23" 2 463 "0x12"
d G "LVD_22" 2 464 "0x11"
d G "LVD_21" 2 465 "0x10"
d G "LVD_TRIGGER_BELOW" 2 467 "0"
d G "LVD_TRIGGER_ABOVE" 2 468 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 473 ""
v L "mode" 2 473 "int8" `212 
f B "setup_oscillator" 2 473 "int8(int8 mode)" `211 
f N "setup_oscillator" 2 474 ""
v L "mode" 2 474 "int8" `214 
v L "tune" 2 474 "sint8" `215 
f G "setup_oscillator" 2 474 "int8(int8 mode,sint8 tune)" `213  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 477 "0"
d G "OSC_125KHZ" 2 478 "0x10"
d G "OSC_250KHZ" 2 479 "0x20"
d G "OSC_500KHZ" 2 480 "0x30"
d G "OSC_1MHZ" 2 481 "0x40"
d G "OSC_2MHZ" 2 482 "0x50"
d G "OSC_4MHZ" 2 483 "0x60"
d G "OSC_8MHZ" 2 484 "0x70"
d G "OSC_16MHZ" 2 485 "0x4060"
d G "OSC_32MHZ" 2 486 "0x4070"
d G "OSC_TIMER1" 2 488 "1"
d G "OSC_INTRC" 2 489 "2"
d G "OSC_NORMAL" 2 490 "0"
d G "OSC_IDLE_MODE" 2 492 "0x80"
d G "OSC_31250" 2 493 "0x8000"
d G "OSC_PLL_ON" 2 494 "0x4000"
d G "OSC_PLL_OFF" 2 495 "0"
d G "OSC_STATE_STABLE" 2 499 "4"
d G "OSC_STATE_EXT_RUNNING" 2 500 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 507 ""
v L "mode" 2 507 "int16" `217 
f B "setup_adc" 2 507 "void(int16 mode)" `216 
f N "read_adc" 2 508 ""
f B "read_adc" 2 508 "int8()" `218 
f N "read_adc" 2 509 ""
v L "mode" 2 509 "int8" `220 
f G "read_adc" 2 509 "int8(int8 mode)" `219 
f N "read_adc" 2 510 ""
f G "read_adc" 2 510 "int16()" `221 
f N "read_adc" 2 511 ""
v L "mode" 2 511 "int8" `223 
f G "read_adc" 2 511 "int16(int8 mode)" `222 
f N "adc_done" 2 512 ""
f B "adc_done" 2 512 "int8()" `224  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 514 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 515 "0x100"
d G "ADC_CLOCK_DIV_4" 2 516 "0x04"
d G "ADC_CLOCK_DIV_8" 2 517 "0x01"
d G "ADC_CLOCK_DIV_16" 2 518 "0x05"
d G "ADC_CLOCK_DIV_32" 2 519 "0x02"
d G "ADC_CLOCK_DIV_64" 2 520 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 521 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 523 "0x00"
d G "ADC_TAD_MUL_2" 2 524 "0x08"
d G "ADC_TAD_MUL_4" 2 525 "0x10"
d G "ADC_TAD_MUL_6" 2 526 "0x18"
d G "ADC_TAD_MUL_8" 2 527 "0x20"
d G "ADC_TAD_MUL_12" 2 528 "0x28"
d G "ADC_TAD_MUL_16" 2 529 "0x30"
d G "ADC_TAD_MUL_20" 2 530 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 533 ""
v L "pins" 2 533 "int8" `226 
f B "setup_adc_ports" 2 533 "void(int8 pins)" `225 
f N "setup_adc_ports" 2 534 ""
v L "pins" 2 534 "int8" `228 
v L "reference" 2 534 "int8" `229 
f G "setup_adc_ports" 2 534 "void(int8 pins,int8 reference)" `227 
f N "set_analog_pins" 2 535 ""
v L "pins" 2 535 "int8" `231 
f B "set_analog_pins" 2 535 "void(int8 pins)" `230 
f N "set_analog_pins" 2 536 ""
v L "pins" 2 536 "int8" `233 
v L "reference" 2 536 "int8" `234 
f G "set_analog_pins" 2 536 "void(int8 pins,int8 reference)" `232 
f N "set_adc_channel" 2 537 ""
v L "channel" 2 537 "int8" `236 
f B "set_adc_channel" 2 537 "void(int8 channel)" `235  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 540 "0x0F" "None"
d G "ALL_ANALOG" 2 541 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 542 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 543 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 544 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 545 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 546 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 547 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 548 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 549 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 550 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 551 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 552 "0x0D" "A0 A1"
d G "AN0" 2 553 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 554 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 555 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 556 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 557 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 558 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 559 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 560 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 561 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 562 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 563 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 564 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 565 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 568 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 569 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 570 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 571 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 574 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 575 "1"
d G "ADC_READ_ONLY" 2 576 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 582 ""
v L "x" 2 582 "sint8" `238 
f B "abs" 2 582 "sint8(sint8 x)" `237 
f N "abs" 2 583 ""
v L "x" 2 583 "sint16" `240 
f G "abs" 2 583 "sint16(sint16 x)" `239 
f N "abs" 2 584 ""
v L "x" 2 584 "sint32" `242 
f G "abs" 2 584 "sint32(sint32 x)" `241 
f N "abs" 2 585 ""
v L "x" 2 585 "float" `244 
f G "abs" 2 585 "float(float x)" `243 
f N "_mul" 2 586 ""
v L "??65535" 2 586 "int8" `246 
v L "??65535" 2 586 "int8" `247 
f B "_mul" 2 586 "int16(int8 ,int8 )" `245 
f N "_mul" 2 587 ""
v L "??65535" 2 587 "sint8" `246 
v L "??65535" 2 587 "sint8" `250 
f G "_mul" 2 587 "sint16(sint8 ,sint8 )" `248 
f N "_mul" 2 588 ""
v L "??65535" 2 588 "int16" `246 
v L "??65535" 2 588 "int16" `253 
f G "_mul" 2 588 "int32(int16 ,int16 )" `251 
f N "_mul" 2 589 ""
v L "??65535" 2 589 "sint16" `246 
v L "??65535" 2 589 "sint16" `256 
f G "_mul" 2 589 "sint32(sint16 ,sint16 )" `254  "Memory Manipulation Prototypes:"
f N "read_bank" 2 592 ""
v L "bank" 2 592 "int8" `258 
v L "offset" 2 592 "int8" `259 
f B "read_bank" 2 592 "int8(int8 bank,int8 offset)" `257 
f N "write_bank" 2 593 ""
v L "bank" 2 593 "int8" `261 
v L "offset" 2 593 "int8" `262 
v L "value" 2 593 "int8" `263 
f B "write_bank" 2 593 "void(int8 bank,int8 offset,int8 value)" `260 
f N "strcpy" 2 594 ""
v L "dest" 2 594 "*int8" `265 
v L "src" 2 594 "*int8" `266 
f B "strcpy" 2 594 "void(*int8 dest,*int8 src)" `264 
f N "memset" 2 595 ""
v L "destination" 2 595 "*int8" `268 
v L "value" 2 595 "int8" `269 
v L "num" 2 595 "int16" `270 
f B "memset" 2 595 "void(*int8 destination,int8 value,int16 num)" `267 
f N "memcpy" 2 596 ""
v L "destination" 2 596 "*int8" `272 
v L "source" 2 596 "*int8" `273 
v L "num" 2 596 "int16" `274 
f B "memcpy" 2 596 "void(*int8 destination,*int8 source,int16 num)" `271  "String Prototypes:"
f N "toupper" 2 599 ""
v L "cvalue" 2 599 "int8" `276 
f B "toupper" 2 599 "int8(int8 cvalue)" `275 
f N "tolower" 2 600 ""
v L "cvalue" 2 600 "int8" `278 
f B "tolower" 2 600 "int8(int8 cvalue)" `277 
f N "sprintf" 2 601 ""
v L "string" 2 601 "*int8" `280 
v L "cstring" 2 601 "*int8" `281 
f B "sprintf" 2 601 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `279  "Data Manipulators Prototypes:"
f N "shift_left" 2 604 ""
v L "address" 2 604 "*int8" `284 
v L "bytes" 2 604 "int8" `285 
v L "value" 2 604 "int8" `286 
f B "shift_left" 2 604 "int8(*int8 address,int8 bytes,int8 value)" `283 
f N "shift_right" 2 605 ""
v L "address" 2 605 "*int8" `288 
v L "bytes" 2 605 "int8" `289 
v L "value" 2 605 "int8" `290 
f B "shift_right" 2 605 "int8(*int8 address,int8 bytes,int8 value)" `287 
f N "rotate_left" 2 606 ""
v L "address" 2 606 "*int8" `292 
v L "bytes" 2 606 "int8" `293 
f B "rotate_left" 2 606 "void(*int8 address,int8 bytes)" `291 
f N "rotate_right" 2 607 ""
v L "address" 2 607 "*int8" `295 
v L "bytes" 2 607 "int8" `296 
f B "rotate_right" 2 607 "void(*int8 address,int8 bytes)" `294 
f N "swap" 2 608 ""
v L "value" 2 608 "int8" `298 
f B "swap" 2 608 "void(int8 value)" `297 
f N "make8" 2 609 ""
v L "var" 2 609 "int16" `300 
v L "offset" 2 609 "int8" `301 
f B "make8" 2 609 "int8(int16 var,int8 offset)" `299 
f N "make8" 2 610 ""
v L "var" 2 610 "int32" `300 
v L "offset" 2 610 "int8" `304 
f G "make8" 2 610 "int8(int32 var,int8 offset)" `302 
f N "make16" 2 611 ""
v L "varhigh" 2 611 "int8" `306 
v L "varlow" 2 611 "int8" `307 
f B "make16" 2 611 "int16(int8 varhigh,int8 varlow)" `305 
f N "make32" 2 612 ""
v L "var1" 2 612 "int16" `309 
f B "make32" 2 612 "int32(int16 var1)" `308 
f N "make32" 2 613 ""
v L "var1" 2 613 "int16" `311 
v L "var2" 2 613 "int16" `312 
f G "make32" 2 613 "int32(int16 var1,int16 var2)" `310 
f N "make32" 2 614 ""
v L "var1" 2 614 "int16" `311 
v L "var2" 2 614 "int8" `315 
f G "make32" 2 614 "int32(int16 var1,int8 var2)" `313 
f N "make32" 2 615 ""
v L "var1" 2 615 "int16" `317 
v L "var2" 2 615 "int8" `318 
v L "var3" 2 615 "int8" `319 
f G "make32" 2 615 "int32(int16 var1,int8 var2,int8 var3)" `316 
f N "make32" 2 616 ""
v L "var1" 2 616 "int8" `321 
f G "make32" 2 616 "int32(int8 var1)" `320 
f N "make32" 2 617 ""
v L "var1" 2 617 "int8" `311 
v L "var2" 2 617 "int8" `324 
f G "make32" 2 617 "int32(int8 var1,int8 var2)" `322 
f N "make32" 2 618 ""
v L "var1" 2 618 "int8" `317 
v L "var2" 2 618 "int8" `318 
v L "var3" 2 618 "int8" `328 
f G "make32" 2 618 "int32(int8 var1,int8 var2,int8 var3)" `325 
f N "make32" 2 619 ""
v L "var1" 2 619 "int8" `330 
v L "var2" 2 619 "int8" `331 
v L "var3" 2 619 "int8" `332 
v L "var4" 2 619 "int8" `333 
f G "make32" 2 619 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `329 
f N "make32" 2 620 ""
v L "var1" 2 620 "int8" `311 
v L "var2" 2 620 "int16" `336 
f G "make32" 2 620 "int32(int8 var1,int16 var2)" `334 
f N "make32" 2 621 ""
v L "var1" 2 621 "int8" `317 
v L "var2" 2 621 "int16" `318 
v L "var3" 2 621 "int8" `340 
f G "make32" 2 621 "int32(int8 var1,int16 var2,int8 var3)" `337 
f N "make32" 2 622 ""
v L "var1" 2 622 "int8" `317 
v L "var2" 2 622 "int8" `318 
v L "var3" 2 622 "int16" `344 
f G "make32" 2 622 "int32(int8 var1,int8 var2,int16 var3)" `341 
f N "bit_set" 2 623 ""
v L "var" 2 623 "int8" `346 
v L "bit" 2 623 "int8" `347 
f B "bit_set" 2 623 "void(int8 var,int8 bit)" `345 
f N "bit_set" 2 624 ""
v L "var" 2 624 "int16" `346 
v L "bit" 2 624 "int8" `350 
f G "bit_set" 2 624 "void(int16 var,int8 bit)" `348 
f N "bit_set" 2 625 ""
v L "var" 2 625 "int32" `346 
v L "bit" 2 625 "int8" `353 
f G "bit_set" 2 625 "void(int32 var,int8 bit)" `351 
f N "bit_clear" 2 626 ""
v L "var" 2 626 "int8" `355 
v L "bit" 2 626 "int8" `356 
f B "bit_clear" 2 626 "void(int8 var,int8 bit)" `354 
f N "bit_clear" 2 627 ""
v L "var" 2 627 "int16" `355 
v L "bit" 2 627 "int8" `359 
f G "bit_clear" 2 627 "void(int16 var,int8 bit)" `357 
f N "bit_clear" 2 628 ""
v L "var" 2 628 "int32" `355 
v L "bit" 2 628 "int8" `362 
f G "bit_clear" 2 628 "void(int32 var,int8 bit)" `360 
f N "bit_test" 2 629 ""
v L "var" 2 629 "int8" `364 
v L "bit" 2 629 "int8" `365 
f B "bit_test" 2 629 "int8(int8 var,int8 bit)" `363 
f N "bit_test" 2 630 ""
v L "var" 2 630 "int16" `364 
v L "bit" 2 630 "int8" `368 
f G "bit_test" 2 630 "int8(int16 var,int8 bit)" `366 
f N "bit_test" 2 631 ""
v L "var" 2 631 "int32" `364 
v L "bit" 2 631 "int8" `371 
f G "bit_test" 2 631 "int8(int32 var,int8 bit)" `369  "#use delay() Prototypes:"
f N "delay_cycles" 2 634 ""
v L "count" 2 634 "int8" `373 
f B "delay_cycles" 2 634 "void(int8 count)" `372 
f N "delay_ms" 2 635 ""
v L "time" 2 635 "int16" `375 
f B "delay_ms" 2 635 "void(int16 time)" `374 
f N "delay_us" 2 636 ""
v L "time" 2 636 "int16" `377 
f B "delay_us" 2 636 "void(int16 time)" `376  "#use rs232() Prototypes:"
f N "putchar" 2 639 ""
v L "cdata" 2 639 "int8" `379 
f B "putchar" 2 639 "void(int8 cdata)" `378 
f N "putchar" 2 640 ""
v L "cdata" 2 640 "int8" `381 
v L "stream" 2 640 "int8" `382 
f G "putchar" 2 640 "void(int8 cdata,int8 stream)" `380 
f N "puts" 2 641 ""
v L "string" 2 641 "*int8" `384 
f B "puts" 2 641 "void(*int8 string)" `383 
f N "puts" 2 642 ""
v L "string" 2 642 "*int8" `386 
v L "stream" 2 642 "int8" `387 
f G "puts" 2 642 "void(*int8 string,int8 stream)" `385 
f N "getch" 2 643 ""
f B "getch" 2 643 "int8()" `388 
f N "getch" 2 644 ""
v L "stream" 2 644 "int8" `390 
f G "getch" 2 644 "int8(int8 stream)" `389 
f N "gets" 2 645 ""
v L "string" 2 645 "*int8" `392 
f B "gets" 2 645 "void(*int8 string)" `391 
f N "gets" 2 646 ""
v L "string" 2 646 "*int8" `394 
v L "stream" 2 646 "int8" `395 
f G "gets" 2 646 "void(*int8 string,int8 stream)" `393 
f N "kbhit" 2 647 ""
f B "kbhit" 2 647 "int8()" `396 
f N "kbhit" 2 648 ""
v L "stream" 2 648 "int8" `398 
f G "kbhit" 2 648 "int8(int8 stream)" `397 
f N "printf" 2 649 ""
v L "string" 2 649 "*int8" `400 
f B "printf" 2 649 "void(*int8 string,*int8 _VA_LIST)" `399 
f N "fprintf" 2 650 ""
v L "stream" 2 650 "int8" `403 
v L "string" 2 650 "*int8" `404 
f B "fprintf" 2 650 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `402 
f N "putc_send" 2 651 ""
f B "putc_send" 2 651 "void()" `406 
f N "fputc_send" 2 652 ""
v L "stream" 2 652 "int8" `408 
f B "fputc_send" 2 652 "void(int8 stream)" `407 
f N "rcv_buffer_full" 2 653 ""
f B "rcv_buffer_full" 2 653 "int8()" `409 
f N "rcv_buffer_full" 2 654 ""
v L "stream" 2 654 "int8" `411 
f G "rcv_buffer_full" 2 654 "int8(int8 stream)" `410 
f N "rcv_buffer_bytes" 2 655 ""
f B "rcv_buffer_bytes" 2 655 "int16()" `412 
f N "rcv_buffer_bytes" 2 656 ""
v L "stream" 2 656 "int8" `414 
f G "rcv_buffer_bytes" 2 656 "int16(int8 stream)" `413 
f N "tx_buffer_full" 2 657 ""
f B "tx_buffer_full" 2 657 "int8()" `415 
f N "tx_buffer_full" 2 658 ""
v L "stream" 2 658 "int8" `417 
f G "tx_buffer_full" 2 658 "int8(int8 stream)" `416 
f N "tx_buffer_bytes" 2 659 ""
f B "tx_buffer_bytes" 2 659 "int16()" `418 
f N "tx_buffer_bytes" 2 660 ""
v L "stream" 2 660 "int8" `420 
f G "tx_buffer_bytes" 2 660 "int16(int8 stream)" `419  "#use i2c() Prototypes:"
f N "i2c_read" 2 663 ""
f B "i2c_read" 2 663 "int8()" `421 
f N "i2c_read" 2 664 ""
v L "stream" 2 664 "int8" `423 
f G "i2c_read" 2 664 "int8(int8 stream)" `422 
f N "i2c_read" 2 665 ""
v L "stream" 2 665 "int8" `425 
v L "ack" 2 665 "int8" `426 
f G "i2c_read" 2 665 "int8(int8 stream,int8 ack)" `424 
f N "i2c_write" 2 666 ""
v L "data" 2 666 "int8" `428 
f B "i2c_write" 2 666 "int8(int8 data)" `427 
f N "i2c_write" 2 667 ""
v L "stream" 2 667 "int8" `430 
v L "data" 2 667 "int8" `431 
f G "i2c_write" 2 667 "int8(int8 stream,int8 data)" `429 
f N "i2c_start" 2 668 ""
f B "i2c_start" 2 668 "void()" `432 
f N "i2c_start" 2 669 ""
v L "stream" 2 669 "int8" `434 
f G "i2c_start" 2 669 "void(int8 stream)" `433 
f N "i2c_start" 2 670 ""
v L "stream" 2 670 "int8" `436 
v L "restart" 2 670 "int8" `437 
f G "i2c_start" 2 670 "void(int8 stream,int8 restart)" `435 
f N "i2c_stop" 2 671 ""
f B "i2c_stop" 2 671 "void()" `438 
f N "i2c_stop" 2 672 ""
v L "stream" 2 672 "int8" `440 
f G "i2c_stop" 2 672 "void(int8 stream)" `439 
f N "i2c_isr_state" 2 673 ""
f B "i2c_isr_state" 2 673 "int8()" `441 
f N "i2c_slaveaddr" 2 674 ""
v L "addr" 2 674 "int8" `443 
f B "i2c_slaveaddr" 2 674 "void(int8 addr)" `442 
f N "i2c_slaveaddr" 2 675 ""
v L "stream" 2 675 "int8" `445 
v L "addr" 2 675 "int8" `446 
f G "i2c_slaveaddr" 2 675 "void(int8 stream,int8 addr)" `444 
f N "i2c_poll" 2 676 ""
f B "i2c_poll" 2 676 "int8()" `447 
f N "i2c_poll" 2 677 ""
v L "stream" 2 677 "int8" `449 
f G "i2c_poll" 2 677 "int8(int8 stream)" `448 
f N "i2c_init" 2 678 ""
v L "baud" 2 678 "int32" `451 
f B "i2c_init" 2 678 "void(int32 baud)" `450 
f N "i2c_init" 2 679 ""
v L "stream" 2 679 "int8" `453 
v L "baud" 2 679 "int32" `454 
f G "i2c_init" 2 679 "void(int8 stream,int32 baud)" `452  "#use spi() Prototypes:"
f N "spi_xfer" 2 682 ""
f B "spi_xfer" 2 682 "int8()" `455 
f N "spi_xfer" 2 683 ""
f G "spi_xfer" 2 683 "int16()" `456 
f N "spi_xfer" 2 684 ""
f G "spi_xfer" 2 684 "int32()" `457 
f N "spi_xfer" 2 685 ""
v L "data" 2 685 "int8" `459 
f G "spi_xfer" 2 685 "int8(int8 data)" `458 
f N "spi_xfer" 2 686 ""
v L "data" 2 686 "int16" `461 
f G "spi_xfer" 2 686 "int16(int16 data)" `460 
f N "spi_xfer" 2 687 ""
v L "data" 2 687 "int32" `463 
f G "spi_xfer" 2 687 "int32(int32 data)" `462 
f N "spi_xfer" 2 688 ""
v L "stream" 2 688 "int8" `465 
v L "data" 2 688 "int8" `466 
f G "spi_xfer" 2 688 "int8(int8 stream,int8 data)" `464 
f N "spi_xfer" 2 689 ""
v L "stream" 2 689 "int8" `465 
v L "data" 2 689 "int16" `469 
f G "spi_xfer" 2 689 "int16(int8 stream,int16 data)" `467 
f N "spi_xfer" 2 690 ""
v L "stream" 2 690 "int8" `465 
v L "data" 2 690 "int32" `472 
f G "spi_xfer" 2 690 "int32(int8 stream,int32 data)" `470 
f N "spi_xfer" 2 691 ""
v L "stream" 2 691 "int8" `474 
v L "data" 2 691 "int8" `475 
v L "bits" 2 691 "int8" `476 
f G "spi_xfer" 2 691 "int8(int8 stream,int8 data,int8 bits)" `473 
f N "spi_xfer" 2 692 ""
v L "stream" 2 692 "int8" `474 
v L "data" 2 692 "int16" `475 
v L "bits" 2 692 "int8" `480 
f G "spi_xfer" 2 692 "int16(int8 stream,int16 data,int8 bits)" `477 
f N "spi_xfer" 2 693 ""
v L "stream" 2 693 "int8" `474 
v L "data" 2 693 "int32" `475 
v L "bits" 2 693 "int8" `484 
f G "spi_xfer" 2 693 "int32(int8 stream,int32 data,int8 bits)" `481 
f N "spi_init" 2 694 ""
v L "baud" 2 694 "int32" `486 
f B "spi_init" 2 694 "void(int32 baud)" `485 
f N "spi_init" 2 695 ""
v L "stream" 2 695 "int8" `488 
v L "baud" 2 695 "int32" `489 
f G "spi_init" 2 695 "void(int8 stream,int32 baud)" `487 
f N "spi_speed" 2 696 ""
v L "baud" 2 696 "int32" `491 
f B "spi_speed" 2 696 "void(int32 baud)" `490 
f N "spi_speed" 2 697 ""
v L "stream" 2 697 "int8" `493 
v L "baud" 2 697 "int32" `494 
f G "spi_speed" 2 697 "void(int8 stream,int32 baud)" `492 
f N "spi_speed" 2 698 ""
v L "stream" 2 698 "int8" `496 
v L "baud" 2 698 "int32" `497 
v L "clock" 2 698 "int32" `498 
f G "spi_speed" 2 698 "void(int8 stream,int32 baud,int32 clock)" `495 
f N "spi_prewrite" 2 699 ""
v L "data" 2 699 "int8" `500 
f B "spi_prewrite" 2 699 "void(int8 data)" `499 
f N "spi_prewrite" 2 700 ""
v L "data" 2 700 "int16" `502 
f G "spi_prewrite" 2 700 "void(int16 data)" `501 
f N "spi_prewrite" 2 701 ""
v L "data" 2 701 "int32" `504 
f G "spi_prewrite" 2 701 "void(int32 data)" `503 
f N "spi_prewrite" 2 702 ""
v L "??65535" 2 702 "int8" `506 
v L "data" 2 702 "int8" `507 
f G "spi_prewrite" 2 702 "void(int8 ,int8 data)" `505 
f N "spi_prewrite" 2 703 ""
v L "??65535" 2 703 "int8" `506 
v L "data" 2 703 "int16" `510 
f G "spi_prewrite" 2 703 "void(int8 ,int16 data)" `508 
f N "spi_prewrite" 2 704 ""
v L "??65535" 2 704 "int8" `506 
v L "data" 2 704 "int32" `513 
f G "spi_prewrite" 2 704 "void(int8 ,int32 data)" `511 
f N "spi_xfer_in" 2 705 ""
f B "spi_xfer_in" 2 705 "int8()" `514 
f N "spi_xfer_in" 2 706 ""
f G "spi_xfer_in" 2 706 "int16()" `515 
f N "spi_xfer_in" 2 707 ""
f G "spi_xfer_in" 2 707 "int32()" `516 
f N "spi_xfer_in" 2 708 ""
v L "bits" 2 708 "int8" `518 
f G "spi_xfer_in" 2 708 "int8(int8 bits)" `517 
f N "spi_xfer_in" 2 709 ""
v L "bits" 2 709 "int8" `520 
f G "spi_xfer_in" 2 709 "int16(int8 bits)" `519 
f N "spi_xfer_in" 2 710 ""
v L "bits" 2 710 "int8" `522 
f G "spi_xfer_in" 2 710 "int32(int8 bits)" `521 
f N "spi_xfer_in" 2 711 ""
v L "stream" 2 711 "int8" `524 
v L "bits" 2 711 "int8" `525 
f G "spi_xfer_in" 2 711 "int8(int8 stream,int8 bits)" `523 
f N "spi_xfer_in" 2 712 ""
v L "stream" 2 712 "int8" `524 
v L "bits" 2 712 "int8" `528 
f G "spi_xfer_in" 2 712 "int16(int8 stream,int8 bits)" `526 
f N "spi_xfer_in" 2 713 ""
v L "stream" 2 713 "int8" `524 
v L "bits" 2 713 "int8" `531 
f G "spi_xfer_in" 2 713 "int32(int8 stream,int8 bits)" `529  "#use rtos() Prototypes:"
f N "rtos_run" 2 716 ""
f B "rtos_run" 2 716 "void()" `532 
f N "rtos_yield" 2 717 ""
f B "rtos_yield" 2 717 "void()" `533 
f N "rtos_enable" 2 718 ""
v L "task" 2 718 "int8" `535 
f B "rtos_enable" 2 718 "void(int8 task)" `534 
f N "rtos_disable" 2 719 ""
v L "task" 2 719 "int8" `537 
f B "rtos_disable" 2 719 "void(int8 task)" `536 
f N "rtos_terminate" 2 720 ""
f B "rtos_terminate" 2 720 "void()" `538 
f N "rtos_await" 2 721 ""
v L "flag" 2 721 "int8" `540 
f B "rtos_await" 2 721 "void(int8 flag)" `539 
f N "rtos_wait" 2 722 ""
v L "sem" 2 722 "int8" `542 
f B "rtos_wait" 2 722 "void(int8 sem)" `541 
f N "rtos_signal" 2 723 ""
v L "sem" 2 723 "int8" `544 
f B "rtos_signal" 2 723 "void(int8 sem)" `543 
f N "rtos_msg_send" 2 724 ""
v L "task" 2 724 "int8" `546 
v L "msg" 2 724 "int8" `547 
f B "rtos_msg_send" 2 724 "void(int8 task,int8 msg)" `545 
f N "rtos_msg_read" 2 725 ""
f B "rtos_msg_read" 2 725 "int8()" `548 
f N "rtos_msg_poll" 2 726 ""
f B "rtos_msg_poll" 2 726 "int8()" `549 
f N "rtos_overrun" 2 727 ""
v L "task" 2 727 "int8" `551 
f B "rtos_overrun" 2 727 "int8(int8 task)" `550 
f N "rtos_stats" 2 728 ""
v L "task" 2 728 "int8" `553 
v L "stat" 2 728 "*int8" `554 
f B "rtos_stats" 2 728 "void(int8 task,*int8 stat)" `552  "#use timer() Prototypes:"
f N "get_ticks" 2 731 ""
f B "get_ticks" 2 731 "int8()" `555 
f N "get_ticks" 2 732 ""
f G "get_ticks" 2 732 "int16()" `556 
f N "get_ticks" 2 733 ""
f G "get_ticks" 2 733 "int32()" `557 
f N "get_ticks" 2 734 ""
v L "stream" 2 734 "int8" `559 
f G "get_ticks" 2 734 "int8(int8 stream)" `558 
f N "get_ticks" 2 735 ""
v L "stream" 2 735 "int8" `561 
f G "get_ticks" 2 735 "int16(int8 stream)" `560 
f N "get_ticks" 2 736 ""
v L "stream" 2 736 "int8" `563 
f G "get_ticks" 2 736 "int32(int8 stream)" `562 
f N "set_ticks" 2 737 ""
v L "value" 2 737 "int8" `565 
f B "set_ticks" 2 737 "void(int8 value)" `564 
f N "set_ticks" 2 738 ""
v L "value" 2 738 "int16" `567 
f G "set_ticks" 2 738 "void(int16 value)" `566 
f N "set_ticks" 2 739 ""
v L "value" 2 739 "int32" `569 
f G "set_ticks" 2 739 "void(int32 value)" `568 
f N "set_ticks" 2 740 ""
v L "stream" 2 740 "int8" `571 
v L "value" 2 740 "int8" `572 
f G "set_ticks" 2 740 "void(int8 stream,int8 value)" `570 
f N "set_ticks" 2 741 ""
v L "stream" 2 741 "int8" `571 
v L "value" 2 741 "int16" `575 
f G "set_ticks" 2 741 "void(int8 stream,int16 value)" `573 
f N "set_ticks" 2 742 ""
v L "stream" 2 742 "int8" `571 
v L "value" 2 742 "int32" `578 
f G "set_ticks" 2 742 "void(int8 stream,int32 value)" `576  "#use pwm() Prototypes:"
f N "pwm_on" 2 745 ""
f B "pwm_on" 2 745 "void()" `579 
f N "pwm_on" 2 746 ""
v L "stream" 2 746 "int8" `581 
f G "pwm_on" 2 746 "void(int8 stream)" `580 
f N "pwm_off" 2 747 ""
f B "pwm_off" 2 747 "void()" `582 
f N "pwm_off" 2 748 ""
v L "stream" 2 748 "int8" `584 
f G "pwm_off" 2 748 "void(int8 stream)" `583 
f N "pwm_set_duty" 2 749 ""
v L "duty" 2 749 "int16" `586 
f B "pwm_set_duty" 2 749 "void(int16 duty)" `585 
f N "pwm_set_duty" 2 750 ""
v L "stream" 2 750 "int8" `588 
v L "duty" 2 750 "int16" `589 
f G "pwm_set_duty" 2 750 "void(int8 stream,int16 duty)" `587 
f N "pwm_set_duty_percent" 2 751 ""
v L "percent" 2 751 "int16" `591 
f B "pwm_set_duty_percent" 2 751 "void(int16 percent)" `590 
f N "pwm_set_duty_percent" 2 752 ""
v L "stream" 2 752 "int8" `593 
v L "percent" 2 752 "int16" `594 
f G "pwm_set_duty_percent" 2 752 "void(int8 stream,int16 percent)" `592 
f N "pwm_set_frequency" 2 753 ""
v L "frequency" 2 753 "int32" `596 
f B "pwm_set_frequency" 2 753 "void(int32 frequency)" `595 
f N "pwm_set_frequency" 2 754 ""
v L "stream" 2 754 "int8" `598 
v L "frequency" 2 754 "int32" `599 
f G "pwm_set_frequency" 2 754 "void(int8 stream,int32 frequency)" `597  "#use capture() Prototypes:"
f N "get_capture_time" 2 757 ""
f B "get_capture_time" 2 757 "int16()" `600 
f N "get_capture_time" 2 758 ""
v L "stream" 2 758 "int8" `602 
f G "get_capture_time" 2 758 "int16(int8 stream)" `601 
f N "get_capture_event" 2 759 ""
f B "get_capture_event" 2 759 "int8()" `603 
f N "get_capture_event" 2 760 ""
v L "stream" 2 760 "int8" `605 
f G "get_capture_event" 2 760 "int8(int8 stream)" `604  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 773 ""
v L "address" 2 773 "int32" `607 
f B "goto_address" 2 773 "void(int32 address)" `606 
f N "label_address" 2 774 ""
v L "label" 2 774 "int32" `609 
f B "label_address" 2 774 "int32(int32 label)" `608  "Program Memory Prototypes:"
f N "read_program_memory" 2 777 ""
v L "address" 2 777 "int32" `611 
v L "dataptr" 2 777 "*int8" `612 
v L "count" 2 777 "int16" `613 
f B "read_program_memory" 2 777 "void(int32 address,*int8 dataptr,int16 count)" `610 
f N "read_program_eeprom" 2 778 ""
v L "address" 2 778 "int32" `615 
f B "read_program_eeprom" 2 778 "int16(int32 address)" `614 
f N "write_program_memory" 2 779 ""
v L "address" 2 779 "int32" `617 
v L "dataptr" 2 779 "*int8" `618 
v L "count" 2 779 "int16" `619 
f B "write_program_memory" 2 779 "void(int32 address,*int8 dataptr,int16 count)" `616 
f N "write_program_eeprom" 2 780 ""
v L "address" 2 780 "int32" `621 
v L "data" 2 780 "int16" `622 
f B "write_program_eeprom" 2 780 "void(int32 address,int16 data)" `620  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 785 "int16" `623 
f N "read_eeprom" 2 790 ""
v L "address" 2 790 "__EEADDRESS__" `625 
f B "read_eeprom" 2 790 "int8(__EEADDRESS__ address)" `624 
f N "write_eeprom" 2 791 ""
v L "address" 2 791 "__EEADDRESS__" `627 
v L "value" 2 791 "int8" `628 
f B "write_eeprom" 2 791 "void(__EEADDRESS__ address,int8 value)" `626  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 798 ""
v L "interrupt" 2 798 "int32" `630 
f B "enable_interrupts" 2 798 "void(int32 interrupt)" `629 
f N "disable_interrupts" 2 799 ""
v L "interrupt" 2 799 "int32" `632 
f B "disable_interrupts" 2 799 "void(int32 interrupt)" `631 
f N "clear_interrupt" 2 800 ""
v L "interrupt" 2 800 "int32" `634 
f B "clear_interrupt" 2 800 "void(int32 interrupt)" `633 
f N "interrupt_active" 2 801 ""
v L "interrupt" 2 801 "int32" `636 
f B "interrupt_active" 2 801 "int8(int32 interrupt)" `635 
f N "interrupt_enabled" 2 802 ""
v L "interrupt" 2 802 "int32" `638 
f B "interrupt_enabled" 2 802 "int8(int32 interrupt)" `637 
f N "ext_int_edge" 2 803 ""
v L "source" 2 803 "int8" `640 
v L "edge" 2 803 "int8" `641 
f B "ext_int_edge" 2 803 "void(int8 source,int8 edge)" `639 
f N "jump_to_isr" 2 804 ""
v L "address" 2 804 "int16" `643 
f B "jump_to_isr" 2 804 "void(int16 address)" `642  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 806 "0x40"
d G "H_TO_L" 2 807 "0"
d G "GLOBAL" 2 809 "0xF2C0"
d G "PERIPH" 2 810 "0xF240"
d G "INT_RTCC" 2 811 "0x00F220"
d G "INT_TIMER0" 2 812 "0x00F220"
d G "INT_TIMER1" 2 813 "0x009D01"
d G "INT_TIMER2" 2 814 "0x009D02"
d G "INT_TIMER3" 2 815 "0x00A002"
d G "INT_EXT_L2H" 2 816 "0x5000F210"
d G "INT_EXT_H2L" 2 817 "0x6000F210"
d G "INT_EXT" 2 818 "0x00F210"
d G "INT_EXT1_L2H" 2 819 "0x5001F008"
d G "INT_EXT1_H2L" 2 820 "0x6001F008"
d G "INT_EXT1" 2 821 "0x00F008"
d G "INT_EXT2_L2H" 2 822 "0x5002F010"
d G "INT_EXT2_H2L" 2 823 "0x6002F010"
d G "INT_EXT2" 2 824 "0x00F010"
d G "INT_RB" 2 825 "0x00FFF208"
d G "INT_PSP" 2 826 "0x009D80"
d G "INT_AD" 2 827 "0x009D40"
d G "INT_RDA" 2 828 "0x009D20"
d G "INT_TBE" 2 829 "0x009D10"
d G "INT_SSP" 2 830 "0x009D08"
d G "INT_CCP1" 2 831 "0x009D04"
d G "INT_CCP2" 2 832 "0x00A001"
d G "INT_BUSCOL" 2 833 "0x00A008"
d G "INT_LOWVOLT" 2 834 "0x00A004"
d G "INT_COMP" 2 835 "0x00A040"
d G "INT_EEPROM" 2 836 "0x00A010"
d G "INT_OSCF" 2 837 "0x00A080"
D G "inicio" 1 6 "INPUT (PIN_A0)"
D G "paro" 1 7 "INPUT (PIN_A1)"
D G "nb" 1 8 "INPUT (PIN_A2)"
D G "na" 1 9 "INPUT (PIN_A3)"
D G "termico" 1 10 "INPUT (PIN_A4)"
D G "LED_ON" 1 23 "(x) output_high(x)"
D G "LED_OFF" 1 24 "(x) output_low(x)"
D G "ciclo" 1 26 "PIN_B0"
D G "fallo" 1 27 "PIN_B1"
D G "pump" 1 28 "PIN_B2"
C L "jump_to_isr" 1 15 1 "FUNCTION"
F N "busca_falla" 1 33 ""
f G "busca_falla" 1 33 "void()" `650 
F N "secuencia" 1 34 ""
f G "secuencia" 1 34 "void()" `651 
F N "mostrar_falla" 1 35 ""
f G "mostrar_falla" 1 35 "void()" `652 
F N "genera_flasheo" 1 36 ""
f G "genera_flasheo" 1 36 "void()" `653 
F N "envia_datos" 1 37 ""
f G "envia_datos" 1 37 "void()" `654  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_STDLIB" 4 12 ""
D G "RAND_MAX" 4 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 25 "1"
T G "div_t" 4 33 "{sint8 quot,sint8 rem}" `658 
T G "ldiv_t" 4 38 "{sint16 quot,sint16 rem}" `662  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "envia_datos" 3 3 6 "FUNCTION"
C L "envia_datos" 4 43 2 "FUNCTION"
C L "envia_datos" 4 46 1 "*"
C L "envia_datos" 4 46 1 "*"
F N "atoi" 4 50 ""
V L "s" 4 50 "*int8" `664 
f G "atoi" 4 50 "sint8(*int8 s)" `663  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 4 58 ""
V L "s" 4 58 "*int8" `666 
f G "atoi32" 4 58 "sint32(*int8 s)" `665  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 4 46 2 "FUNCTION"
F N "itoa" 4 79 ""
V L "num" 4 79 "sint32" `668 
V L "base" 4 79 "int8" `669 
V L "s" 4 79 "*int8" `670 
f G "itoa" 4 79 "*int8(sint32 num,int8 base,*int8 s)" `667  "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 81 1 "*"
C L "itoa" 4 81 1 "*"
F N "atol" 4 85 ""
V L "s" 4 85 "*int8" `672 
f G "atol" 4 85 "sint16(*int8 s)" `671  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
F N "strtol" 4 93 ""
V L "s" 4 93 "*int8" `674 
V L "endptr" 4 93 "*int8" `675 
V L "base" 4 93 "sint8" `676 
f G "strtol" 4 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `673  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
F N "strtoul" 4 101 ""
V L "s" 4 101 "*int8" `678 
V L "endptr" 4 101 "*int8" `679 
V L "base" 4 101 "sint8" `680 
f G "strtoul" 4 101 "int16(*int8 s,*int8 endptr,sint8 base)" `677  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 95 2 "FUNCTION"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
F N "strtof" 4 110 ""
V L "s" 4 110 "*int8" `682 
V L "endptr" 4 110 "*int8" `683 
f G "strtof" 4 110 "float(*int8 s,*int8 endptr)" `681  "provided for compatibility"
D G "strtof48" 4 116 "(s,e) strtof(s, e)"
D G "strtod" 4 117 "(s,e) strtof(s, e)"
C L "strtof" 4 103 1 "FUNCTION"
C L "strtof" 4 120 1 "*"
D G "atof" 4 124 "(s)   strtof(s, 0)"
C L "strtof" 4 120 1 "FUNCTION"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
F N "atoe" 4 149 ""
V L "s" 4 149 "*int8" `685 
f G "atoe" 4 149 "float(*int8 s)" `684  "Pseudo-random sequence generation functions"
C L "atoe" 4 143 1 "FUNCTION"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
F N "rand" 4 169 ""
f G "rand" 4 169 "int16()" `686  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
F N "srand" 4 191 ""
V L "seed" 4 191 "int32" `688 
f G "srand" 4 191 "void(int32 seed)" `687  "Memory management functions"
C L "srand" 4 171 3 "FUNCTION"
F N "system" 4 205 ""
V L "string" 4 205 "*int8" `690 
f G "system" 4 205 "sint8(*int8 string)" `689  "Searching and sorting utilities"
C L "system" 4 171 1 "FUNCTION"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 4 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
D G "labs" 4 249 "abs"
F N "div" 4 251 ""
V L "numer" 4 251 "sint8" `692 
V L "denom" 4 251 "sint8" `693 
f G "div" 4 251 "div_t(sint8 numer,sint8 denom)" `691 
F N "ldiv" 4 252 ""
V L "numer" 4 252 "sint16" `695 
V L "denom" 4 252 "sint16" `696 
f G "ldiv" 4 252 "ldiv_t(sint16 numer,sint16 denom)" `694  "Multibyte character functions"
C L "ldiv" 4 229 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*int8" `698 
V L "s2" 5 34 "*int8" `699 
V L "n" 5 34 "int16" `700 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `697 
V L "sc1" 5 36 "*int8" `701 
V L "sc2" 5 37 "*int8" `702 
D G "strcopy" 5 54 "strcpy"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `704 
V L "s2" 5 61 "*int8" `705 
V L "n" 5 61 "int16" `706 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `703 
V L "s" 5 63 "*int8" `707 
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `709 
V L "s2" 5 78 "*int8" `710 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `708 
V L "s" 5 80 "*int8" `711 
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `713 
V L "s2" 5 96 "*int8" `714 
V L "n" 5 96 "int16" `715 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `712 
V L "s" 5 98 "*int8" `716 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*int8" `718 
V L "s2" 5 120 "*int8" `719 
V L "n" 5 120 "int16" `720 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `717 
V L "su1" 5 122 "*int8" `721 
V L "su2" 5 122 "*int8" `722 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `724 
V L "s2" 5 134 "*int8" `725 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `723 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `727 
V L "s2" 5 144 "*int8" `728 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `726 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `730 
V L "s2" 5 157 "*int8" `731 
V L "n" 5 157 "int16" `732 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `729 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `734 
V L "s2" 5 170 "*int8" `735 
V L "n" 5 170 "int16" `736 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `733 
V L "c" 5 172 "int8" `737 
V L "n1" 5 173 "int8" `738 
C L "strxfrm" 5 19 1 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*int8" `740 
V L "c" 5 201 "int8" `741 
V L "n" 5 201 "int16" `742 
F G "memchr" 5 202 "*int8(*int8 s,int8 c,int16 n)" `739 
V L "uc" 5 203 "int8" `743 
V L "su" 5 204 "*int8" `744 
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `746 
V L "c" 5 215 "int8" `747 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `745 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `749 
V L "s2" 5 227 "*int8" `750 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `748 
V L "sc1" 5 229 "*int8" `751 
V L "sc2" 5 229 "*int8" `752 
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `754 
V L "s2" 5 242 "*int8" `755 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `753 
V L "sc1" 5 244 "*int8" `756 
V L "sc2" 5 244 "*int8" `757 
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `759 
V L "c" 5 257 "int8" `760 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `758 
V L "p" 5 259 "*int8" `761 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `763 
V L "s2" 5 272 "*int8" `764 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `762 
V L "sc1" 5 274 "*int8" `765 
V L "sc2" 5 274 "*int8" `766 
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `768 
V L "s2" 5 291 "*int8" `769 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `767 
V L "s" 5 293 "*int8" `770 
V L "t" 5 293 "*int8" `771 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `773 
F G "strlen" 5 319 "int16(*int8 s)" `772 
V L "sc" 5 320 "*int8" `774 
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `776 
V L "s2" 5 341 "*int8" `777 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `775 
V L "beg" 5 343 "*int8" `778 
V L "end" 5 343 "*int8" `779 
V L "save" 5 344 "*int8" `780 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `782 
V L "s2" 5 392 "*int8" `783 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `781 
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `787 
F G "strlwr" 5 407 "*int8(*int8 s)" `786 
V L "p" 5 408 "*int8" `788 
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `790 
F G "strupr" 5 421 "*int8(*int8 s)" `789 
V L "p" 5 422 "*int8" `791 
F N "div" 4 274 ""
V L "numer" 4 274 "sint8" `692 
V L "denom" 4 274 "sint8" `794 
F G "div" 4 275 "div_t(sint8 numer,sint8 denom)" `691 
V L "val" 4 276 "div_t" `792 
F N "ldiv" 4 282 ""
V L "numer" 4 282 "sint16" `695 
V L "denom" 4 282 "sint16" `801 
F G "ldiv" 4 283 "ldiv_t(sint16 numer,sint16 denom)" `694 
V L "val" 4 284 "ldiv_t" `799 
F N "atoe" 4 361 ""
V L "s" 4 361 "*int8" `807 
F G "atoe" 4 362 "float(*int8 s)" `684 
V L "pow10" 4 363 "float" `806 
V L "result" 4 364 "float" `807 
V L "sign" 4 365 "int8" `808 
V L "expsign" 4 366 "int8" `809 
V L "c" 4 367 "int8" `810 
V L "ptr" 4 368 "int8" `811 
V L "i" 4 369 "int8" `812 
V L "exp" 4 370 "float" `813 
V L "expcnt" 4 371 "int8" `814 
C L "atoe" 4 397 1 "FUNCTION"
F N "atoi" 4 429 ""
V L "s" 4 429 "*int8" `827 
F G "atoi" 4 430 "sint8(*int8 s)" `663 
V L "result" 4 431 "sint8" `826 
V L "sign" 4 432 "int8" `827 
V L "base" 4 432 "int8" `828 
V L "index" 4 432 "int8" `829 
V L "c" 4 433 "int8" `830 
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
F N "atol" 4 498 ""
V L "s" 4 498 "*int8" `832 
F G "atol" 4 499 "sint16(*int8 s)" `671 
V L "result" 4 500 "sint16" `831 
V L "sign" 4 501 "int8" `832 
V L "base" 4 501 "int8" `833 
V L "index" 4 501 "int8" `834 
V L "c" 4 502 "int8" `835 
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "mult_with10" 4 397 1 "FUNCTION"
F N "mult_with10" 4 565 ""
V L "num" 4 565 "int32" `837 
F G "mult_with10" 4 566 "sint32(int32 num)" `836 
F N "atoi32" 4 571 ""
V L "s" 4 571 "*int8" `839 
F G "atoi32" 4 572 "sint32(*int8 s)" `665 
V L "result" 4 573 "sint32" `838 
V L "sign" 4 574 "int8" `839 
V L "base" 4 574 "int8" `840 
V L "index" 4 574 "int8" `841 
V L "c" 4 575 "int8" `842 
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
F N "itoa" 4 770 ""
V L "num" 4 770 "sint32" `668 
V L "base" 4 770 "int8" `669 
V L "s" 4 770 "*int8" `846 
F G "itoa" 4 771 "*int8(sint32 num,int8 base,*int8 s)" `667 
V L "temp" 4 772 "int32" `843 
V L "i" 4 773 "int8" `844 
V L "sign" 4 773 "int8" `845 
V L "cnt" 4 773 "int8" `846 
V L "c" 4 774 "int8" `847 
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
F N "strtof" 4 885 ""
V L "s" 4 885 "*int8" `682 
V L "endptr" 4 885 "*int8" `856 
F G "strtof" 4 886 "float(*int8 s,*int8 endptr)" `681 
V L "pow10" 4 887 "float" `854 
V L "result" 4 888 "float" `855 
V L "skip" 4 889 "int1" `856 
V L "sign" 4 889 "int1" `857 
V L "point" 4 889 "int1" `858 
V L "c" 4 890 "int8" `859 
V L "ptr" 4 891 "int8" `860 
F N "strtoul" 4 1103 ""
V L "s" 4 1103 "*int8" `678 
V L "endptr" 4 1103 "*int8" `679 
V L "base" 4 1103 "sint8" `865 
F G "strtoul" 4 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `677 
V L "sc" 4 1105 "*int8" `862 
V L "s1" 4 1105 "*int8" `863 
V L "sd" 4 1105 "*int8" `864 
V L "x" 4 1106 "int16" `865 
V L "sign" 4 1107 "int8" `866 
V L "digits" 4 1108 "int8[1]" `867 
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
F N "strtol" 4 1165 ""
V L "s" 4 1165 "*int8" `674 
V L "endptr" 4 1165 "*int8" `675 
V L "base" 4 1165 "sint8" `872 
F G "strtol" 4 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `673 
V L "sc" 4 1167 "*int8" `869 
V L "s1" 4 1167 "*int8" `870 
V L "sd" 4 1167 "*int8" `871 
V L "x" 4 1168 "sint16" `872 
V L "sign" 4 1169 "int8" `873 
V L "digits" 4 1170 "int8[1]" `874 
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
F N "system" 4 1228 ""
V L "string" 4 1228 "*int8" `877 
F G "system" 4 1229 "sint8(*int8 string)" `689 
F N "mblen" 4 1233 ""
V L "s" 4 1233 "*int8" `877 
V L "n" 4 1233 "int16" `878 
F G "mblen" 4 1234 "int16(*int8 s,int16 n)" `876 
F N "mbtowc" 4 1238 ""
V L "pwc" 4 1238 "*int8" `880 
V L "s" 4 1238 "*int8" `881 
V L "n" 4 1238 "int16" `882 
F G "mbtowc" 4 1239 "int8(*int8 pwc,*int8 s,int16 n)" `879 
F N "wctomb" 4 1244 ""
V L "s" 4 1244 "*int8" `884 
V L "wchar" 4 1244 "int8" `885 
F G "wctomb" 4 1245 "int8(*int8 s,int8 wchar)" `883 
F N "mbstowcs" 4 1250 ""
V L "pwcs" 4 1250 "*int8" `887 
V L "s" 4 1250 "*int8" `888 
V L "n" 4 1250 "int16" `889 
F G "mbstowcs" 4 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `886 
F N "wcstombs" 4 1256 ""
V L "s" 4 1256 "*int8" `891 
V L "pwcs" 4 1256 "*int8" `892 
V L "n" 4 1256 "int16" `893 
F G "wcstombs" 4 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `890 
V G "_Randseed" 4 1266 "int32" `894 
F N "rand" 4 1268 ""
F G "rand" 4 1269 "int16()" `686 
F N "srand" 4 1274 ""
V L "seed" 4 1274 "int32" `899 
F G "srand" 4 1275 "void(int32 seed)" `687 
F N "*_Cmpfun" 4 1284 ""
V L "p1" 4 1284 "*int8" `899 
V L "p2" 4 1284 "*int8" `900 
T G "*_Cmpfun" 4 1284 "sint8(*int8 p1,*int8 p2)" `898 
F N "qsort" 4 1291 ""
V L "qdata" 4 1291 "*int8" `903 
V L "qitems" 4 1291 "int8" `904 
V L "qsize" 4 1291 "int8" `905 
V L "cmp" 4 1291 "_Cmpfun" `906 
F G "qsort" 4 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `902 
V L "m" 4 1292 "int8" `907 
V L "j" 4 1292 "int8" `908 
V L "i" 4 1292 "int8" `909 
V L "l" 4 1292 "int8" `910 
V L "done" 4 1293 "int1" `911 
V L "t" 4 1294 "int8[16]" `912 
F N "bsearch" 4 1319 ""
V L "key" 4 1319 "*int8" `915 
V L "base" 4 1319 "*int8" `916 
V L "num" 4 1319 "int16" `917 
V L "width" 4 1319 "int16" `918 
V L "cmp" 4 1319 "_Cmpfun" `919 
F G "bsearch" 4 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `914 
V L "p" 4 1321 "*int8" `920 
V L "q" 4 1321 "*int8" `921 
V L "n" 4 1322 "int16" `922 
V L "pivot" 4 1323 "int16" `923 
V L "val" 4 1324 "sint8" `924 
C L "bsearch" 4 397 1 "FUNCTION"
D G "_STDLIBM" 7 14 ""
T G "node_t" 7 29 "{int16 size,int16 next}" `931 
D G "debug_stdlibm" 7 41 "(s)"
D G "_MEMMGMT_CSIZE" 8 12 "32768"
D G "_MEMMGMT_POS" 8 13 "15"
F N "create_node" 8 22 ""
V L "size" 8 22 "int16" `934 
V L "ptr" 8 22 "*node_t" `935  "create node at given location"
F G "create_node" 8 23 "*node_t(int16 size,*node_t ptr)" `933 
V L "result" 8 24 "*node_t" `936 
F N "update_node" 8 30 ""
V L "node" 8 30 "*node_t" `938 
V L "size" 8 30 "int16" `939  "update the size of given node"
F G "update_node" 8 31 "void(*node_t node,int16 size)" `937 
C L "insert_node_after" 8 2 2 "FUNCTION"
F N "insert_node_after" 8 36 ""
V L "place" 8 36 "*node_t" `941 
V L "node" 8 36 "*node_t" `942  "place the node after another given node"
F G "insert_node_after" 8 37 "void(*node_t place,*node_t node)" `940 
F N "remove_node" 8 47 ""
V L "node" 8 47 "*node_t" `944 
F G "remove_node" 8 47 "void(*node_t node)" `943  "remove the given node from the memlist"
V L "ptr" 8 48 "*node_t" `945 
F N "traverse" 7 60 ""
F G "traverse" 7 61 "void()" `946 
V L "node" 7 62 "*node_t" `947 
V L "temp" 7 62 "*node_t" `948 
V L "nsize" 7 63 "int16" `949 
V L "nextsize" 7 63 "int16" `950 
C L "traverse" 7 75 1 "FUNCTION"
C L "traverse" 7 75 1 "FUNCTION"
F N "malloc" 7 102 ""
V L "size" 7 102 "int16" `952 
F G "malloc" 7 103 "*int8(int16 size)" `951 
V L "node" 7 104 "*node_t" `953 
V L "new" 7 104 "*node_t" `954 
V L "nsize" 7 105 "int16" `955 
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
C L "malloc" 7 75 1 "FUNCTION"
F N "calloc" 7 159 ""
V L "nmemb" 7 159 "int16" `957 
V L "size" 7 159 "int16" `958 
F G "calloc" 7 160 "*int8(int16 nmemb,int16 size)" `956 
V L "node" 7 161 "*node_t" `959 
V L "new" 7 161 "*node_t" `960 
V L "nsize" 7 162 "int16" `961 
V L "resize" 7 162 "int16" `962 
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
C L "calloc" 7 75 1 "FUNCTION"
F N "free" 7 207 ""
V L "ptr" 7 207 "*int8" `968 
F G "free" 7 208 "void(*int8 ptr)" `967 
V L "node" 7 209 "*node_t" `969 
V L "nsize" 7 210 "int16" `970 
C L "free" 7 75 1 "FUNCTION"
C L "free" 7 75 1 "FUNCTION"
C L "free" 7 75 1 "FUNCTION"
F N "realloc" 7 238 ""
V L "ptr" 7 238 "*int8" `972 
V L "size" 7 238 "int16" `973 
F G "realloc" 7 239 "*int8(*int8 ptr,int16 size)" `971 
V L "node" 7 240 "*node_t" `974 
V L "new" 7 240 "*node_t" `975 
V L "temp" 7 240 "*node_t" `976 
V L "nsize" 7 241 "int16" `977 
V L "nextsize" 7 241 "int16" `978 
V L "newptr" 7 242 "*int8" `979 
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
C L "realloc" 7 75 1 "FUNCTION"
D G "_STDIO" 9 12 ""
D G "_STDINT" 10 19 ""
T G "int8_t" 10 23 "sint8" `980 
T G "uint8_t" 10 24 "int8" `981 
T G "int16_t" 10 25 "sint16" `982 
T G "uint16_t" 10 26 "int16" `983 
T G "int32_t" 10 27 "sint32" `984 
T G "uint32_t" 10 28 "int32" `985 
D G "INT8_MAX" 10 37 " (127)"
D G "INT8_MIN" 10 38 " (-128)"
D G "UINT8_MAX" 10 39 " (255)"
D G "INT16_MAX" 10 41 " (32767)"
D G "INT16_MIN" 10 42 " (-32768)"
D G "UINT16_MAX" 10 43 " (65535)"
D G "INT32_MAX" 10 45 " (2147483647)"
D G "INT32_MIN" 10 46 " (-2147483648)"
D G "UINT32_MAX" 10 47 " (4294967295)"
T G "int_least8_t" 10 61 "sint8" `986 
T G "uint_least8_t" 10 62 "int8" `987 
T G "int_least16_t" 10 63 "sint16" `988 
T G "uint_least16_t" 10 64 "int16" `989 
T G "int_least32_t" 10 65 "sint32" `990 
T G "uint_least32_t" 10 66 "int32" `991 
D G "INT_LEAST8_MAX" 10 75 " (127)"
D G "INT_LEAST8_MIN" 10 76 " (-128)"
D G "UINT_LEAST8_MAX" 10 77 " (255)"
D G "INT_LEAST16_MAX" 10 79 " (32767)"
D G "INT_LEAST16_MIN" 10 80 " (-32768)"
D G "UINT_LEAST16_MAX" 10 81 " (65535)"
D G "INT_LEAST32_MAX" 10 83 " (2147483647)"
D G "INT_LEAST32_MIN" 10 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 10 85 " (4294967295)"
T G "int_fast8_t" 10 112 "sint8" `992 
T G "uint_fast8_t" 10 113 "int8" `993 
D G "INT_FAST8_MAX" 10 114 " (127)"
D G "INT_FAST8_MIN" 10 115 " (-128)"
D G "UINT_FAST8_MAX" 10 116 " (255)"
T G "int_fast16_t" 10 117 "sint16" `994 
T G "uint_fast16_t" 10 118 "int16" `995 
T G "int_fast32_t" 10 121 "sint32" `996 
T G "uint_fast32_t" 10 122 "int32" `997 
D G "INT_FAST16_MAX" 10 124 " (32767)"
D G "INT_FAST16_MIN" 10 125 " (-32768)"
D G "UINT_FAST16_MAX" 10 126 " (65535)"
D G "INT_FAST32_MAX" 10 128 " (2147483647)"
D G "INT_FAST32_MIN" 10 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 10 130 " (4294967295)"
D G "_IOS" 11 12 ""
D G "cout" 11 19 "0"
D G "cin" 11 20 "0"
D G "endl" 11 24 ""\r\n"" "Linux users might just want "\n""
D G "ends" 11 25 "_iosctrl('C')'\000'" "Outputs a null char"
D G "hex" 11 29 "_iosctrl('H')" "Hex format numbers"
D G "dec" 11 30 "_iosctrl('D')" "Decimal format numbers"
D G "setprecision" 11 31 "(x) _iosctrl('P',x)" "Set number of places after the decimal point"
D G "setw" 11 32 "(x)         _iosctrl('W',x)" "Set total number of characters output for numbers"
D G "strspace" 11 33 "_iosctrl('S')" "Allow spaces to be input into strings"
D G "nostrspace" 11 34 "_iosctrl('s')" "Spaces terminate string entry"
D G "boolalpha" 11 35 "_iosctrl('B')" "Output int1 as true and false"
D G "noboolalpha" 11 36 "_iosctrl('b')" "Output int1 as 1 and 0"
D G "fixed" 11 37 "_iosctrl('e')" "Floats in decimal format"
D G "scientific" 11 38 "_iosctrl('E')" "Floats use E notation"
D G "iosdefault" 11 39 "_iosctrl('R')" "All manipulators to default settings"
D G "echo" 11 40 "_iosctrl('O')" "Input is echoed"
D G "noecho" 11 41 "_iosctrl('o')" "Input is not echoed"
V G "falla" 0 11 "int1" `998 
V G "flasheo" 0 12 "int1" `999 
V G "ktiempo" 0 13 "int16" `1000 
V G "x" 0 14 "int8" `1001 
V G "y" 0 15 "int8" `1002  "Desarrollo de Funciones//"
F N "busca_falla" 0 17 ""
F G "busca_falla" 0 18 "void()" `650 
F N "secuencia" 0 23 ""
F G "secuencia" 0 24 "void()" `651 
F N "mostrar_falla" 0 29 ""
F G "mostrar_falla" 0 30 "void()" `652 
F N "genera_flasheo" 0 36 ""
F G "genera_flasheo" 0 37 "void()" `653 
C L "genera_flasheo" 0 39 1 "FUNCTION"
F N "envia_datos" 0 47 ""
F G "envia_datos" 0 48 "void()" `654 
C L "envia_datos" 0 39 1 "FUNCTION"
F N "MAIN" 0 60 ""
F G "MAIN" 0 61 "void()" `1014 
C L "MAIN" 0 39 1 "FUNCTION"
C L "MAIN" 0 39 1 "FUNCTION"
C L "MAIN" 0 39 1 "FUNCTION"
C L "MAIN" 0 39 1 "FUNCTION"
C L "MAIN" 0 39 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
